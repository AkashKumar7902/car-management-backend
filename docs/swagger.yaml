basePath: /
definitions:
  models.Car:
    properties:
      description:
        type: string
      images:
        description: URLs or paths
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      cars:
        items:
          $ref: '#/definitions/models.Car'
        type: array
      email:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Documentation for Car Management Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Car Management API
  version: "1.0"
paths:
  /api/cars:
    get:
      consumes:
      - application/json
      description: Get a list of all cars for the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Car'
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List all cars
      tags:
      - Cars
    post:
      consumes:
      - multipart/form-data
      description: Create a new car with title, description, tags, and optional images
      parameters:
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Tags (comma-separated)
        in: formData
        name: tags
        type: string
      - description: Images
        in: formData
        name: images
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new car
      tags:
      - Cars
  /api/cars/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a car by ID for the logged-in user
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Delete a car
      tags:
      - Cars
    get:
      consumes:
      - application/json
      description: Get car by ID for the logged-in user
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get a specific car
      tags:
      - Cars
    put:
      consumes:
      - multipart/form-data
      description: Update car details for the logged-in user
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      - description: Title
        in: formData
        name: title
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Tags (comma-separated)
        in: formData
        name: tags
        type: string
      - description: Images URLs or paths
        in: formData
        name: images
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update a car
      tags:
      - Cars
  /api/cars/search:
    get:
      consumes:
      - application/json
      description: Search cars by keyword in title, description, or tags
      parameters:
      - description: Search keyword
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Car'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Search cars
      tags:
      - Cars
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token
      parameters:
      - description: User Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login a user
      tags:
      - Users
  /api/users/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email, and password
      parameters:
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register a new user
      tags:
      - Users
swagger: "2.0"
